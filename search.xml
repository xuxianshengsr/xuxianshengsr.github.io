<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES7、ES8、ES9、ES10新特性</title>
      <link href="/2020/09/15/es7-es8-es9-es10-xin-te-xing/"/>
      <url>/2020/09/15/es7-es8-es9-es10-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="ES7、ES8、ES9、ES10新特性"><a href="#ES7、ES8、ES9、ES10新特性" class="headerlink" title="ES7、ES8、ES9、ES10新特性"></a>ES7、ES8、ES9、ES10新特性</h1><h2 id="一、ES2017"><a href="#一、ES2017" class="headerlink" title="一、ES2017"></a>一、ES2017</h2><h3 id="1-对象尾逗号"><a href="#1-对象尾逗号" class="headerlink" title="1. 对象尾逗号"></a>1. 对象尾逗号</h3><ul><li><p>es2017允许函数对象的定义调用时参数可以加入尾逗号，以及json对象array对象都允许</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-String-padStart和String-padEnd"><a href="#2-String-padStart和String-padEnd" class="headerlink" title="2. String.padStart和String.padEnd"></a>2. String.padStart和String.padEnd</h3><ul><li><p>padStart：[length,string] 在字符串首位开始添加string直到满足length为止并返回新的字符串;</p></li><li><p>若string+原字符串的长度大于length, 则多余string不添加;</p></li><li><p>若string+原字符串的长度小于length, 则重复string，直到满足length；</p></li><li><p>padEnd: [length,string] 与padStart一致 唯一区别是在末尾添加;</p></li></ul><pre class=" language-javascript"><code class="language-javascript">   console<span class="token punctuation">.</span>log <span class="token punctuation">(</span> <span class="token string">"test"</span><span class="token punctuation">.</span>padStart <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"123456789123"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1234test</span>   console<span class="token punctuation">.</span>log <span class="token punctuation">(</span> <span class="token string">"test"</span><span class="token punctuation">.</span>padStart <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"12"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1212test</span>   console<span class="token punctuation">.</span>log <span class="token punctuation">(</span> <span class="token string">"test"</span><span class="token punctuation">.</span>padEnd <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"123456789123"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//test1234</span>   console<span class="token punctuation">.</span>log <span class="token punctuation">(</span> <span class="token string">"test"</span><span class="token punctuation">.</span>padEnd <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"12"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//test1212</span></code></pre><h3 id="3-Object-values-Object-entries"><a href="#3-Object-values-Object-entries" class="headerlink" title="3. Object.values/Object.entries"></a>3. Object.values/Object.entries</h3><ol><li><p>values: [obj]，返回obj自身可枚举属性的属性值的集合;</p><ul><li><p>1.Symbol属性不可获取</p></li><li><p>2.原型、继承属性不可获取</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">65</span><span class="token punctuation">,</span>a<span class="token punctuation">:</span><span class="token number">89</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">78</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[65,89,1]</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">}</span>fn<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[Function]</span><span class="token keyword">var</span> fns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[]  </span></code></pre></li></ul></li></ol><ol start="2"><li><p>entries：[obj], 与values类似，返回的一个2元素的数组</p><ul><li><p>1.若obj为数组，2元素数组第0项为第1项在原数组所在下标</p></li><li><p>2.若obj具有key-value的结构则2元素数组第0项为key第1项为value;</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[ ['0',1], ['1',2], ['2',3] ]</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[ ['a',1], ['b',2] ]  </span></code></pre></li></ul></li></ol><h3 id="ES2017-总结"><a href="#ES2017-总结" class="headerlink" title="ES2017 总结"></a>ES2017 总结</h3><ol><li>Async 函数呈现更清晰的 Promise 语法</li><li>Object.values 方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同（区别在于for…in循环枚举原型链中的属性）</li><li>Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用for…in循环遍历改对象时返回的顺序一致（区别在于for…in循环也枚举原型链中的属性）</li><li>Object.getOwnPropertyDescriptors()返回一个对象的所有自身属性的描述符（.value,.writable,.get,.set,.configurable,enumerable）</li><li>padStart()和padEnd()，填充字符串达到当前长度</li><li>结尾逗号，数组定义和函数参数列表</li><li>ShareArrayBuffer和Atomics用于从共享内存位置读取和写入</li></ol><h2 id="二、ES2018"><a href="#二、ES2018" class="headerlink" title="二、ES2018"></a>二、ES2018</h2><h3 id="1-异步迭代"><a href="#1-异步迭代" class="headerlink" title="1. 异步迭代"></a>1. 异步迭代</h3><p>在<code>async/await</code>的某些时刻，你可能尝试在同步循环中调用异步函数。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码不会正常运行，下面这段同样也不会：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> i <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码中，循环本身依旧保持同步，并在在内部异步函数之前全部调用完成。</p><p>ES2018引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了<code>next()</code>方法返回一个Promise。因此<code>await</code>可以和<code>for...of</code>循环一起使用，以串行的方式运行异步操作。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Promise-finally"><a href="#2-Promise-finally" class="headerlink" title="2. Promise.finally()"></a>2. Promise.finally()</h3><p>一个Promise调用链要么成功到达最后一个<code>.then()</code>，要么失败触发<code>.catch()</code>。在某些情况下，你想要在无论Promise运行成功还是失败，运行相同的代码，例如清除，删除对话，关闭数据库连接等。</p><p><code>.finally()</code>允许你指定最终的逻辑：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">doSomething1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doSomething2<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doSomething3<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// finish here!</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-Rest-Spread-属性"><a href="#3-Rest-Spread-属性" class="headerlink" title="3. Rest/Spread 属性"></a>3. Rest/Spread 属性</h3><p>ES2015引入了Rest参数和扩展运算符。三个点（…）仅用于数组。Rest参数语法允许我们将一个布丁数量的参数表示为一个数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">restParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">restParam</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token operator">...</span>p3<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// p1 = 1</span>  <span class="token comment" spellcheck="true">// p2 = 2</span>  <span class="token comment" spellcheck="true">// p3 = [3, 4, 5]</span><span class="token punctuation">}</span></code></pre><p>展开操作符以相反的方式工作，将数组转换成可传递给函数的单独参数。例如<code>Math.max()</code>返回给定数字中的最大值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span></code></pre><p>或者你可以使用它给函数传递参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">restParam</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">restParam</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>x <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// a = 1</span>  <span class="token comment" spellcheck="true">// x = { b: 2, c: 3 }</span></code></pre><p>跟数组一样，Rest参数只能在声明的结尾处使用。此外，它只适用于每个对象的顶层，如果对象中嵌套对象则无法适用。</p><p>扩展运算符可以在其他对象内使用，例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj2 is { a: 1, b: 2, c: 3, z: 26 </span></code></pre><p>可以使用扩展运算符拷贝一个对象，像是这样<code>obj2 = {...obj1}</code>，但是 <strong>这只是一个对象的浅拷贝</strong>。另外，如果一个对象A的属性是对象B，那么在克隆后的对象cloneB中，该属性指向对象B。</p><h3 id="4-正则表达式命名捕获组（Regular-Expression-Named-Capture-Groups）"><a href="#4-正则表达式命名捕获组（Regular-Expression-Named-Capture-Groups）" class="headerlink" title="4. 正则表达式命名捕获组（Regular Expression Named Capture Groups）"></a>4. 正则表达式命名捕获组（Regular Expression Named Capture Groups）</h3><p>JavaScript正则表达式可以返回一个匹配的对象——一个包含匹配字符串的类数组，例如：以YYYY-MM-DD的格式解析日期：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reDate <span class="token operator">=</span> <span class="token regex">/([0-9]{4})-([0-9]{2})-([0-9]{2})/</span><span class="token punctuation">,</span>  match  <span class="token operator">=</span> reDate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'2018-04-30'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  year   <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 2018</span>  month  <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 04</span>  day    <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30</span></code></pre><p>这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。</p><p>ES2018允许命名捕获组使用符号<code>?&lt;name&gt;</code>，在打开捕获括号<code>(</code>后立即命名，示例如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reDate <span class="token operator">=</span> <span class="token regex">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class="token punctuation">,</span>  match  <span class="token operator">=</span> reDate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'2018-04-30'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  year   <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>year<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 2018</span>  month  <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>month<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 04</span>  day    <span class="token operator">=</span> match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>day<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 30</span></code></pre><p>任何匹配失败的命名组都将返回<code>undefined</code>。</p><p>命名捕获也可以使用在<code>replace()</code>方法中。例如将日期转换为美国的 MM-DD-YYYY 格式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reDate <span class="token operator">=</span> <span class="token regex">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class="token punctuation">,</span>  d      <span class="token operator">=</span> <span class="token string">'2018-04-30'</span><span class="token punctuation">,</span>  usDate <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reDate<span class="token punctuation">,</span> <span class="token string">'$&lt;month>-$&lt;day>-$&lt;year>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-正则表达式反向断言（lookbehind）"><a href="#5-正则表达式反向断言（lookbehind）" class="headerlink" title="5. 正则表达式反向断言（lookbehind）"></a>5. 正则表达式反向断言（lookbehind）</h3><p>目前JavaScript在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reLookahead <span class="token operator">=</span> <span class="token regex">/\D(?=\d+)/</span><span class="token punctuation">,</span>  match       <span class="token operator">=</span> reLookahead<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'$123.89'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $</span></code></pre><p>ES2018引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reLookbehind <span class="token operator">=</span> <span class="token regex">/(?&lt;=\D)\d+/</span><span class="token punctuation">,</span>  match        <span class="token operator">=</span> reLookbehind<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'$123.89'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123.89</span></code></pre><p>以上是 <strong>肯定反向断言</strong>，非数字<code>\D</code>必须存在。同样的，还存在 <strong>否定反向断言</strong>，表示一个值必须不存在，例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span>  reLookbehindNeg <span class="token operator">=</span> <span class="token regex">/(?&lt;!\D)\d+/</span><span class="token punctuation">,</span>  match           <span class="token operator">=</span> reLookbehind<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'$123.89'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span></code></pre><h3 id="6-正则表达式dotAll模式"><a href="#6-正则表达式dotAll模式" class="headerlink" title="6. 正则表达式dotAll模式"></a>6. 正则表达式dotAll模式</h3><p>正则表达式中点<code>.</code>匹配除回车外的任何单字符，标记<code>s</code>改变这种行为，允许行终止符的出现，例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token regex">/hello.world/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'hello\nworld'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token operator">/</span>hello<span class="token punctuation">.</span>world<span class="token operator">/</span>s<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'hello\nworld'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="7-正则表达式-Unicode-转义"><a href="#7-正则表达式-Unicode-转义" class="headerlink" title="7. 正则表达式 Unicode 转义"></a>7. 正则表达式 Unicode 转义</h3><p>到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018添加了 Unicode 属性转义——形式为<code>\p{...}</code>和<code>\P{...}</code>，在正则表达式中使用标记 <code>u</code> (unicode) 设置，在<code>\p</code>块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> reGreekSymbol <span class="token operator">=</span> <span class="token regex">/\p{Script=Greek}/u</span><span class="token punctuation">;</span>reGreekSymbol<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'π'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。</p><h3 id="8-非转义序列的模板字符串"><a href="#8-非转义序列的模板字符串" class="headerlink" title="8. 非转义序列的模板字符串"></a>8. 非转义序列的模板字符串</h3><p>最后，ES2018 移除对 ECMAScript 在带标签的模版字符串中转义序列的语法限制。</p><p>之前，<code>\u</code>开始一个 unicode 转义，<code>\x</code>开始一个十六进制转义，<code>\</code>后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如Windows文件路径 <code>C:\uuu\xxx\111</code>。更多细节参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">模板字符串</a>。</p><h2 id="三、ES2019"><a href="#三、ES2019" class="headerlink" title="三、ES2019"></a>三、ES2019</h2><h3 id="1-String-prototype-trimStart-String-prototype-trimEnd"><a href="#1-String-prototype-trimStart-String-prototype-trimEnd" class="headerlink" title="1. String.prototype.trimStart() / String.prototype.trimEnd()"></a>1. String.prototype.trimStart() / String.prototype.trimEnd()</h3><p>在接收用户输入的文本，我们经常会把头尾的空格文本去掉，来规避展示的不受控情况。自ES5来，<code>String.prototype.trim()</code>被用于去除头尾上的空格、换行符等，现在通过<code>trimStart()</code>，<code>trimEnd()</code>来头和尾进行单独控制。<code>trimLeft()</code>、<code>trimRight()</code>是他们的别名。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">' Hello ES2019! '</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'Hello ES2019! '</span>string<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ' Hello ES2019!'</span></code></pre><h3 id="2-Object-fromEntries"><a href="#2-Object-fromEntries" class="headerlink" title="2. Object.fromEntries()"></a>2. Object.fromEntries()</h3><p>ES2017为我们引入了<code>Object.entries</code>把一个对象转为<code>[key, value]</code>键值对的形式，可以运用于像 Map 这种结构中。凡事有来有回，<code>Object.fromEntries()</code>用于把键值对还原成对象结构。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> object <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// { foo: 'bar' }</span></code></pre><p>ES2017引入了Object.entries, 这个方法可以将对象转换为数组,这样对象就可以使用数组原型中的众多内置方法，比如map, filter、reduce，举个例子，我们想提取下列对象obj中所有value大于21的键值对，如何操作呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES10之前</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [['a',21],["b", 22],["c", 23]]</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">></span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [["b", 22],["c", 23]]</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj1<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> age<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {b: 22, c: 23}</span></code></pre><p>上例中得到了数组arr，想再次转化为对象，就需要手动写一些代码来处理，但是有了Object.fromEntries()就很容易实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用Object.fromEntries()来实现</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token keyword">let</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">></span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {b: 22, c: 23}</span></code></pre><h3 id="3-Array-prototype-flat-Array-prototype-flatMap"><a href="#3-Array-prototype-flat-Array-prototype-flatMap" class="headerlink" title="3. Array.prototype.flat() / Array.prototype.flatMap()"></a>3. Array.prototype.flat() / Array.prototype.flatMap()</h3><p>把数组展平是Array原型给我们带来的新特性，通过传入层级深度参数（默认为1），来为下层数组提升层级。如果想提升所有层级可以写一个比较大的数字甚至是<code>Infinity</code>，当然不推荐这么做。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ 1, 2, 3, 4 ]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ 1, 2, 3, 4, 5, 6 ]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, [5, 6]]</span></code></pre><p>有了flat方法，那自然而然就有Array.prototype.flatMap方法，flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。从方法的名字上也可以看出来它包含两部分功能一个是 map，一个是 flat（深度为1）。</p><p><code>Array.prototype.flatMap()</code>它是<code>Array.prototype.map()</code>和<code>Array.prototype.flat()</code>的组合，通过对map调整后的数据尝试展平操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 4, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 4, 6]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v <span class="token operator">*</span> <span class="token number">2</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [2, 4, 6, 8]</span></code></pre><h3 id="4-catch-的参数改为可选"><a href="#4-catch-的参数改为可选" class="headerlink" title="4. catch 的参数改为可选"></a>4. catch 的参数改为可选</h3><p>在进行<code>try...catch</code>错误处理过程中，如果没有给catch传参数的话，代码就会报错。有时候我们并不关心错误情况，如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isValidJSON <span class="token operator">=</span> json <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">unusedError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Unused error parameter</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在新规范中，我们可以省略catch绑定的参数和括号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isValidJSON <span class="token operator">=</span> json <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="5-Symbol-description"><a href="#5-Symbol-description" class="headerlink" title="5. Symbol.description"></a>5. Symbol.description</h3><p>我们知道，<code>Symbol</code> 的描述只被存储在内部的 [[Description]]，没有直接对外暴露，我们只有调用 <code>Symbol</code> 的 <code>toString()</code> 时才可以读取这个属性：</p><p><code>Symbol</code>是ES6中引入的基本数据类型，可以用作对象属性的标识符。描述属性是只读的，可用于获取符号对象的描述，更好了解它的作用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'desc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "desc"</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ""</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// undefined</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'This is a Symbol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbol<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Symbol(This is a Symbol)</span>Symbol<span class="token punctuation">.</span>description<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'This is a Symbol'</span></code></pre><h3 id="6-JSON-Superset-超集"><a href="#6-JSON-Superset-超集" class="headerlink" title="6. JSON Superset 超集"></a>6. JSON Superset 超集</h3><p>之前如果JSON字符串中包含有行分隔符(\u2028) 和段落分隔符(\u2029)，那么在解析过程中会报错。</p><pre class=" language-JavaScript"><code class="language-JavaScript">JSON.parse('"\u2028"');// SyntaxError</code></pre><p>现在ES2019对它们提供了支持。</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'"\u2028"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ''</span></code></pre><h3 id="7-JSON-stringify-加强格式转化"><a href="#7-JSON-stringify-加强格式转化" class="headerlink" title="7. JSON.stringify() 加强格式转化"></a>7. JSON.stringify() 加强格式转化</h3><p>我们看一下熟知的emoji表现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'😎'</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2</span></code></pre><p>JavaScript将emoji解释为两个字符的原因是UTF-16将emojis（以及其他不寻常的字符）表示为两个代理项的组合。我们的emoji用字符’\uD83D’和’\uDE0E’编码。但是如果试图单独编写这样一个字符，例如’\uD83D’，则会认为这是一个无效的文本字符串。在早期版本中，这些字符将替换为特殊字符：</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'\uD83D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// '"�"'</span></code></pre><p>现在在字符代码之前插入转义字符，结果仍是可读且有效的UTF-8/UTF-16代码：</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'\uD83D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// '"\\ud83d"'</span></code></pre><h3 id="8-Array-prototype-sort-更加稳定"><a href="#8-Array-prototype-sort-更加稳定" class="headerlink" title="8. Array.prototype.sort() 更加稳定"></a>8. Array.prototype.sort() 更加稳定</h3><p>之前，规范允许不稳定的排序算法，如快速排序。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>a <span class="token operator">-</span> b<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [{a: 1, b: 2}, {a: 1, b: 3}...] / [{a: 1, b: 3}, {a: 1, b: 2}...]</span></code></pre><p>在之前的排序中，可能出现<code>[{a: 1, b: 2}, {a: 1, b: 3}...]</code>、<code>[{a: 1, b: 3}, {a: 1, b: 2}...]</code>等多种情况。</p><p>现在所有主流浏览器都使用稳定的排序算法。实际上，这意味着如果我们有一个对象数组，并在给定的键上对它们进行排序，那么列表中的元素将保持相对于具有相同键的其他对象的位置。</p><h3 id="9-Function-prototype-toString-重新修订"><a href="#9-Function-prototype-toString-重新修订" class="headerlink" title="9. Function.prototype.toString() 重新修订"></a>9. Function.prototype.toString() 重新修订</h3><p>从ES2019开始，<code>Function.prototype.toString()</code>将从头到尾返回源代码中的实际文本片段。这意味着还将返回注释、空格和语法详细信息。</p><p>function /* a comment */ foo() {}</p><p>之前，<code>Function.prototype.toString()</code>只会返回了函数的主体，但没有注释和空格。</p><pre class=" language-javascript"><code class="language-javascript">foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'function foo() {}'</span></code></pre><p>但现在，函数返回的结果与编写的一致。</p><pre class=" language-javascript"><code class="language-javascript">foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'function </span><span class="token comment" spellcheck="true">/* a comment  */</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>'</code></pre><h3 id="10-String-prototype-matchAll"><a href="#10-String-prototype-matchAll" class="headerlink" title="10. String.prototype.matchAll"></a>10. String.prototype.matchAll</h3><p>如果一个正则表达式在字符串里面有多个匹配，现在一般使用g修饰符或y修饰符，在循环里面逐一取出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> collectGroup1 <span class="token punctuation">(</span>regExp<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> match <span class="token operator">=</span> regExp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">break</span>    matches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> matches<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">collectGroup1</span><span class="token punctuation">(</span><span class="token regex">/"([^"]*)"/g</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`"foo" and "bar" and "baz"`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [ 'foo', 'bar', 'baz' ]</span></code></pre><p>值得注意的是，如果没有修饰符 /g, .exec() 只返回第一个匹配。现在通过ES9的String.prototype.matchAll方法，可以一次性取出所有匹配。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> collectGroup1 <span class="token punctuation">(</span>regExp<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> match <span class="token keyword">of</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regExp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> results<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">collectGroup1</span><span class="token punctuation">(</span><span class="token regex">/"([^"]*)"/g</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`"foo" and "bar" and "baz"`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ["foo", "bar", "baz"]</span></code></pre><p>上面代码中，由于string.matchAll(regex)返回的是遍历器，所以可以用for…of循环取出。</p><h2 id="四、ES2010"><a href="#四、ES2010" class="headerlink" title="四、ES2010"></a>四、ES2010</h2><h3 id="1-Promise-allSettled"><a href="#1-Promise-allSettled" class="headerlink" title="1. Promise.allSettled"></a>1. Promise.allSettled</h3><p><code>Promise.all</code> 缺陷</p><p>都知道 <code>Promise.all</code> 具有并发执行异步任务的能力。但它的最大问题就是如果其中某个任务出现异常(reject)，所有任务都会挂掉，Promise直接进入 <code>reject</code> 状态。</p><p>想象这个场景：你的页面有三个区域，分别对应三个独立的接口数据，使用 <code>Promise.all</code> 来并发三个接口，如果其中任意一个接口服务异常，状态是reject,这会导致页面中该三个区域数据全都无法渲染出来，因为任何 <code>reject</code> 都会进入catch回调, 很明显，这是无法接受的，如下：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'服务异常'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果其中一个任务是 reject，则不会执行到这个回调。</span>    <span class="token function">RenderContent</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 本例中会执行到这个回调</span>    <span class="token comment" spellcheck="true">// error: {code: 500, msg: "服务异常"}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>我们需要一种机制，如果并发任务中，无论一个任务正常或者异常，都会返回对应的的状态（fulfilled 或者 rejected）与结果（业务value 或者 拒因 reason），在 then 里面通过 filter 来过滤出想要的业务逻辑结果，这就能最大限度的保障业务当前状态的可访问性，而 <code>Promise.allSettled</code> 就是解决这问题的。</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'服务异常'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        0: {status: "rejected", reason: {…}}        1: {status: "fulfilled", value: {…}}        2: {status: "fulfilled", value: {…}}    */</span>    <span class="token comment" spellcheck="true">// 过滤掉 rejected 状态，尽可能多的保证页面区域数据渲染</span>    <span class="token function">RenderContent</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> el<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-可选链（Optional-chaining）"><a href="#2-可选链（Optional-chaining）" class="headerlink" title="2. 可选链（Optional chaining）"></a>2. 可选链（Optional chaining）</h3><p><code>可选链</code> 可让我们在查询具有多层级的对象时，不再需要进行冗余的各种前置校验。</p><p>日常开发中，我们经常会遇到这种查询</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>info <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre><p>又或是这种</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>info <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>info<span class="token punctuation">.</span>getAge <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是一种丑陋但又不得不做的前置校验，否则很容易命中 <code>Uncaught TypeError: Cannot read property...</code> 这种错误，这极有可能让你整个应用挂掉。</p><p>用了 Optional Chaining ，上面代码会变成</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> user<span class="token operator">?</span><span class="token punctuation">.</span>info<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> user<span class="token operator">?</span><span class="token punctuation">.</span>info<span class="token operator">?</span><span class="token punctuation">.</span>getAge<span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可选链中的 <code>?</code> 表示如果问号左边表达式有值, 就会继续查询问号后面的字段。根据上面可以看出，用可选链可以大量简化类似繁琐的前置校验操作，而且更安全。</p><h3 id="3-空值合并运算符（Nullish-coalescing-Operator）"><a href="#3-空值合并运算符（Nullish-coalescing-Operator）" class="headerlink" title="3. 空值合并运算符（Nullish coalescing Operator）"></a>3. 空值合并运算符（Nullish coalescing Operator）</h3><p>当我们查询某个属性时，经常会遇到，如果没有该属性就会设置一个默认的值。比如下面代码中查询玩家等级。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> level <span class="token operator">=</span>  user<span class="token punctuation">.</span>data<span class="token punctuation">.</span>level <span class="token operator">||</span> <span class="token string">'暂无等级'</span><span class="token punctuation">;</span></code></pre><p>在JS中，空字符串、0 ，当进行逻辑操作符判时，会自动转化为 false。在上面的代码里，如果玩家等级本身就是 0 级, 变量 level 就会被赋值 <code>暂无等级</code> 字符串，这是逻辑错误，有时候业务上，我们只需容错取值查询到<code>undefined</code> 或者 <code>null</code> ，比如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//    "level": null</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">var</span> level <span class="token operator">=</span> user<span class="token punctuation">.</span>level <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>level <span class="token operator">!==</span> <span class="token keyword">null</span>            <span class="token operator">?</span> user<span class="token punctuation">.</span>level            <span class="token punctuation">:</span> <span class="token string">'暂无等级'</span><span class="token punctuation">;</span></code></pre><p>来看看用空值合并运算符如何处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//   "level": 0   </span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">var</span> level <span class="token operator">=</span> user<span class="token punctuation">.</span>level <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'暂无等级'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// level -> 0</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//   "an_other_field": 0   </span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">var</span> level <span class="token operator">=</span> user<span class="token punctuation">.</span>level <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'暂无等级'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// level -> '暂无等级'</span></code></pre><p>用空值合并运算在逻辑正确的前提下，代码更加简洁。</p><p>空值合并运算符 与 可选链 相结合，可以很轻松处理多级查询并赋予默认值问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> level <span class="token operator">=</span> user<span class="token punctuation">.</span>data<span class="token operator">?</span><span class="token punctuation">.</span>level <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'暂无等级'</span><span class="token punctuation">;</span></code></pre><h3 id="4-dynamic-import"><a href="#4-dynamic-import" class="headerlink" title="4. dynamic-import"></a>4. dynamic-import</h3><p>按需 import 提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。</p><pre class=" language-javascript"><code class="language-javascript">el<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/path/current-logic.js`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        module<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// load error;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>当然，webpack目前已很好的支持了该特性。</p><h3 id="5-globalThis"><a href="#5-globalThis" class="headerlink" title="5. globalThis"></a>5. globalThis</h3><p>Javascript 在不同的环境获取全局对象有不通的方式，node 中通过 global, web中通过 window, self 等，有些甚至通过 this 获取，但通过 this 是及其危险的，this 在 js 中异常复杂，它严重依赖当前的执行上下文，这些无疑增加了获取全局对象的复杂性。</p><p>过去获取全局对象，可通过一个全局函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> getGlobal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> window<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> global<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unable to locate global object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> globals <span class="token operator">=</span> <span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis</span></code></pre><p>而 globalThis 目的就是提供一种标准化方式访问全局对象，有了 globalThis 后，你可以在任意上下文，任意时刻都能获取到全局对象。</p><h3 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="6. BigInt"></a>6. BigInt</h3><p>Js 中 Number类型只能安全的表示<code>-(2^53-1)</code>至 <code>2^53-1</code> 范的值，即Number.MIN_SAFE_INTEGER 至Number.MAX_SAFE_INTEGER，超出这个范围的整数计算或者表示会丢失精度。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// -> 9007199254740991</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 9007199254740992</span><span class="token comment" spellcheck="true">// 再次加 +1 后无法正常运算</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 9007199254740992</span><span class="token comment" spellcheck="true">// 两个不同的值，却返回了true</span><span class="token number">9007199254740992</span> <span class="token operator">===</span> <span class="token number">9007199254740993</span>  <span class="token comment" spellcheck="true">// -> true</span></code></pre><p>为解决此问题，ES2020提供一种新的数据类型：BigInt。 使用 BigInt 有两种方式：</p><ol><li><p>在整数字面量后面加<code>n</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bigIntNum <span class="token operator">=</span> 9007199254740993n<span class="token punctuation">;</span></code></pre></li><li><p>使用 <code>BigInt</code> 函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bigIntNum <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> anOtherBigIntNum <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">'9007199254740993'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>通过 BigInt， 我们可以安全的进行大数整型计算。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bigNumRet <span class="token operator">=</span> 9007199254740993n <span class="token operator">+</span> 9007199254740993n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> -> 18014398509481986n</span>bigNumRet<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> '18014398509481986'</span></code></pre><p>注意: </p><ol><li><p>BigInt 是一种新的数据原始（primitive）类型。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> 9007199254740993n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 'bigint'</span></code></pre></li><li><p>尽可能避免通过调用函数 <code>BigInt</code> 方式来实例化超大整型。因为参数的字面量实际也是 Number 类型的一次实例化，超出安全范围的数字，可能会引起精度丢失。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令和常见问题</title>
      <link href="/2020/09/06/hexo-chang-yong-ming-ling-he-chang-jian-wen-ti/"/>
      <url>/2020/09/06/hexo-chang-yong-ming-ling-he-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、发布文章"><a href="#一、发布文章" class="headerlink" title="一、发布文章"></a>一、发布文章</h2><ol><li>进入博客所在目录，右键打开 Git Bash Here，创建博文：</li><li>hexo new “My New Post”</li><li>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</li><li>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</li></ol><pre class=" language-git"><code class="language-git">hexo g   # 生成页面hexo d   # 部署发布</code></pre><h2 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h2><pre class=" language-git"><code class="language-git">hexo new <span class="token string">"name"</span>       # 新建文章hexo new page <span class="token string">"name"</span>  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助</code></pre><h2 id="三、常见问题"><a href="#三、常见问题" class="headerlink" title="三、常见问题"></a>三、常见问题</h2><ol><li><p>设置网站图标</p><p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p></li><li><p>修改并部署后没有效果</p><p>使用 <code>hexo clean</code> 清理后重新部署。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html杂项</title>
      <link href="/2020/09/06/html-za-xiang/"/>
      <url>/2020/09/06/html-za-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="阻止a标签的默认跳转"><a href="#阻止a标签的默认跳转" class="headerlink" title="阻止a标签的默认跳转"></a>阻止a标签的默认跳转</h2><ol><li>href=”javascript:;”</li><li>href=”javascript:void(0);”</li><li>hrer=”#”</li><li>hrer=”##”</li><li>hrer=”!#”</li></ol><ul><li>最好用的应该是第2个，可以根据需要来使用</li></ul><h2 id="h5新增表单属性，读取文件"><a href="#h5新增表单属性，读取文件" class="headerlink" title="h5新增表单属性，读取文件"></a>h5新增表单属性，读取文件</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getFileContent()<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    FileReader:读取文件内容    1.readAsText():读取文本文件，（可以使用txt打开的文件），返回文本字符串，默认编编码utf-8    2.readAsBinaryString():读取任何文件，返回二进制 字符串    3.readAsDataURL():读取文件获取一段以data开头的字符串，这段字符串的本质就是DataURL。DataURL是一种将文件嵌入到文档的方案     */</span>    <span class="token keyword">function</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建文件读取对象</span>      <span class="token keyword">var</span> reader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//选择的文件以数组形式存在files中</span>      <span class="token keyword">var</span> file<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myfile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">;</span>      reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      reader<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// console.log(reader.result);</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS继承</title>
      <link href="/2020/07/16/js-ji-cheng/"/>
      <url>/2020/07/16/js-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// ES6继承</span>    <span class="token comment" spellcheck="true">//父类 People</span>    <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'hello'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> xiaoming<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// xiaoming.say()</span>    <span class="token comment" spellcheck="true">//子类 Man</span>    <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子类可以不写构造函数，写就一定要写上supper</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// this.name=name;//this不允许出现在supper前面</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 重写say()方法</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类的say()方法</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"hello子类"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">Manfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'我是子类'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> xiaogang<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">"小刚"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.table(xiaogang);</span>    xiaogang<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xiaogang<span class="token punctuation">.</span><span class="token function">Manfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//People 父类</span>    <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Son 子类    构造继承   核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</span>    <span class="token comment" spellcheck="true">//     特点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 解决了1中，子类实例共享父类引用属性的问题</span>    <span class="token comment" spellcheck="true">//     创建子类实例时，可以向父类传递参数</span>    <span class="token comment" spellcheck="true">//     可以实现多继承（call多个父类对象）</span>    <span class="token comment" spellcheck="true">// 缺点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 实例并不是父类的实例，只是子类的实例</span>    <span class="token comment" spellcheck="true">//     只能继承父类的实例属性和方法，不能继承原型属性/方法</span>    <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//People 父类</span>    <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Brother 子类    原型继承   核心： 将父类的实例作为子类的原型</span>    <span class="token comment" spellcheck="true">//         特点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 非常纯粹的继承关系，实例是子类的实例，也是父类的实例</span>    <span class="token comment" spellcheck="true">//         父类新增原型方法/原型属性，子类都能访问到</span>    <span class="token comment" spellcheck="true">//         简单，易于实现</span>    <span class="token comment" spellcheck="true">//         缺点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中</span>    <span class="token comment" spellcheck="true">//         无法实现多继承</span>    <span class="token comment" spellcheck="true">//         来自原型对象的所有属性被所有实例共享（来自原型对象的引用属性是所有实例共享的）（详细请看附录代码： 示例1）</span>    <span class="token comment" spellcheck="true">// 创建子类实例时，无法向父类构造函数传参</span>    <span class="token comment" spellcheck="true">//     无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</span>    <span class="token keyword">function</span> <span class="token function">Brother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    Brother<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="实例继承"><a href="#实例继承" class="headerlink" title="实例继承"></a>实例继承</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//People 父类</span>    <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例继承   核心：为父类实例添加新特性，作为子类实例返回</span>    <span class="token comment" spellcheck="true">//     特点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 不限制调用方式，不管是new 子类()还是子类(),返回的对象具有相同的效果</span>    <span class="token comment" spellcheck="true">//     缺点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 实例是父类的实例，不是子类的实例</span>    <span class="token comment" spellcheck="true">//     不支持多继承</span>    <span class="token keyword">function</span> <span class="token function">Sister</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> insetance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           insetance<span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>           insetance<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>           insetance<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>        <span class="token keyword">return</span> insetance<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//People 父类</span>    <span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Grandson子类  组合继承  核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</span>    <span class="token comment" spellcheck="true">//     特点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</span>    <span class="token comment" spellcheck="true">//     既是子类的实例，也是父类的实例</span>    <span class="token comment" spellcheck="true">//     不存在引用属性共享问题</span>    <span class="token comment" spellcheck="true">//     可传参</span>    <span class="token comment" spellcheck="true">//     函数可复用</span>    <span class="token comment" spellcheck="true">//     缺点：</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</span>    <span class="token keyword">function</span> <span class="token function">Grandson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Grandson<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 继承 </tag>
            
            <tag> 类 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2020/07/16/mian-shi-ti/"/>
      <url>/2020/07/16/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token operator">+</span>a<span class="token punctuation">)</span>     <span class="token keyword">var</span> a<span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第二个"</span><span class="token operator">+</span>a<span class="token punctuation">)</span>     a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第三个"</span><span class="token operator">+</span>a<span class="token punctuation">)</span>     a<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第四个"</span><span class="token operator">+</span>a<span class="token punctuation">)</span> <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第五个"</span><span class="token operator">+</span>a<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>第一个undefined</p><p>第二个undefined</p><p>第三个5</p><p>第四个1</p><p>第五个10</p><p>Uncaught ReferenceError: b is not defined</p></blockquote><h3 id="从0-40随机选取n个不重复的数字"><a href="#从0-40随机选取n个不重复的数字" class="headerlink" title="从0~40随机选取n个不重复的数字"></a>从0~40随机选取n个不重复的数字</h3><blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> random<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> isExists<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">_random</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> count<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>            <span class="token keyword">var</span> rand<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> random<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始查重了'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rand<span class="token operator">==</span>random<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    isExists<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExists<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始push'</span><span class="token punctuation">)</span>                random<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token operator">+</span>count<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">_random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span></code></pre></blockquote><h3 id="可输入的下拉菜单"><a href="#可输入的下拉菜单" class="headerlink" title="可输入的下拉菜单"></a>可输入的下拉菜单</h3><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browsers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browsers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Internet Explorer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Firefox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Chrome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Opera<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Safari<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局</title>
      <link href="/2020/07/15/xiang-ying-shi-bu-ju/"/>
      <url>/2020/07/15/xiang-ying-shi-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><h2 id="1-设置meta标签"><a href="#1-设置meta标签" class="headerlink" title="1. 设置meta标签"></a>1. 设置meta标签</h2><blockquote><p>大多数移动浏览器将<a href="http://caibaojian.com/t/html" target="_blank" rel="noopener">HTML</a>页面放大为宽的视图（viewport）以符合屏幕分辨率。你可以使用视图的meta标签来进行重置。下面的视图标签告诉浏览器，使用设备的宽度作为视图宽度并禁止初始的缩放。在<code>&lt;head&gt;</code>标签里加入这个meta标签。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>（user-scalable = no 属性能够解决 iPad 切换横屏之后触摸才能回到具体尺寸的问题。 ）</p></blockquote><h2 id="2-通过媒体查询来设置样式"><a href="#2-通过媒体查询来设置样式" class="headerlink" title="2. 通过媒体查询来设置样式"></a>2. 通过媒体查询来设置样式</h2><blockquote><p>原文链接：<a href="http://caibaojian.com/356.html" target="_blank" rel="noopener">http://caibaojian.com/356.html</a></p><p>Media Queries 是响应式设计的核心。<a href="http://caibaojian.com/356.html" target="_blank" rel="noopener">·</a></p><p>它根据条件告诉浏览器如何为指定视图宽度渲染页面。假如一个终端的分辨率小于 980px，那么可以这样写：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 980px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token selector"><span class="token id">#head</span> </span><span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token selector"><span class="token id">#footer</span> </span><span class="token punctuation">{</span> … <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的样式就会覆盖上面已经定义好的样式。</p></blockquote><h2 id="百分比设置宽高"><a href="#百分比设置宽高" class="headerlink" title="百分比设置宽高"></a>百分比设置宽高</h2><h2 id="vh和vw"><a href="#vh和vw" class="headerlink" title="vh和vw"></a>vh和vw</h2><h2 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h2><blockquote><p>原理是，先按定高宽设计出来页面，然后转换为rem单位，<br>配合js查询屏幕大小来改变html的font-size，<br>最终做出所谓的完美自适应。</p></blockquote><h2 id="定宽度布局"><a href="#定宽度布局" class="headerlink" title="定宽度布局"></a>定宽度布局</h2><blockquote><p>很多pc的网站都是定宽度布局的，也就是设置了min-width，<br>这样一来，如果小于这个宽度就会出现滚动条，<br>如果大于这个宽度则内容居中外加背景，<br>这种设计常见与pc端。</p></blockquote><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><ol><li><p>媒体查询</p><p>这种布局通吃pc和移动端，做到精细处，两者的效果都很好，<br>缺点是媒体查询是有限的，也就是可以枚举出来的，<br>只能适应主流的宽高。</p></li><li><p>rem</p><p>优点：理想状态是所有屏幕的高宽比和最初的设计高宽比一样，或者相差不多，完美适应。<br>缺点：碰到重视高度的设计，或者重视元素间间距的设计，那就玩不开了。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.如果只做pc端<br>    那么定宽度是最好的选择<br>2.如果做移动端，且设计对高度要求不高<br>    那么rem+js是最好的选择，一份css+一份js调节font-size搞定<br>3.如果pc，移动要兼容，而且要求很高，那么媒体查询是不错的选择</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git忽略文件</title>
      <link href="/2020/07/09/git-hu-lue-wen-jian/"/>
      <url>/2020/07/09/git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="文件名-gitignore"><a href="#文件名-gitignore" class="headerlink" title="文件名 .gitignore"></a>文件名 .gitignore</h2><pre><code>.DS_Storenode_modules/dist# local env files.env.local.env.*.local# Log filesnpm-debug.log*yarn-debug.log*yarn-error.log*pnpm-debug.log*# Editor directories and files.idea.vscode*.suo*.ntvs**.njsproj*.sln*.sw?</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常用的数组方法</title>
      <link href="/2020/07/05/js-chang-yong-de-shu-zu-fang-fa/"/>
      <url>/2020/07/05/js-chang-yong-de-shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="1-every"><a href="#1-every" class="headerlink" title="1.every()"></a>1.every()</h3><blockquote><p>接收一个函数</p><p>传入一个函数，使用函数检测数组所有元素是否都符合指定条件（通过函数提供）</p><ul><li><p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</p></li><li><p>如果所有元素都满足条件，则返回 true。 </p></li></ul><p>注意：every() 不会对空数组进行检测。</p><p>注意：every() 不会改变原始数组。</p><p>注意：一定要return 一个表达式或者布尔值</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>index</td><td>可选。当前元素索引</td></tr><tr><td>arr</td><td>可选。当前元素属于的数组对象</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr><tr><td>返回值</td><td></td></tr></tbody></table><blockquote><p>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</p></blockquote><p>检测数组 <em>ages</em> 的所有元素是否都大于等于 18</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>返回值是 false</p></blockquote><h3 id="2-filter"><a href="#2-filter" class="headerlink" title="2.filter()"></a>2.filter()</h3><blockquote><p>接收一个函数</p><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p><p><strong>注意：</strong> filter() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>index</td><td>可选。当前元素索引</td></tr><tr><td>arr</td><td>可选。当前元素属于的数组对象</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr><tr><td>返回值</td><td></td></tr></tbody></table><blockquote><p>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</p></blockquote><p>返回数组 <em>ages</em> 中所有元素都大于 18 的元素</p><pre><code>var ages = [32, 33, 16, 40];function checkAdult(age) {     return age &gt;= 18;}</code></pre><p>输出结果是 32， 33， 40</p></blockquote><h3 id="3-find"><a href="#3-find" class="headerlink" title="3.find()"></a>3.find()</h3><blockquote><p>接收一个函数</p><p>find() 方法返回满足测试（函数内判断）的数组的第一个元素的值。</p><p>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined</li></ul><p><strong>注意:</strong> find() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> find() 并没有改变数组的原始值。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必需。当前元素</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引值</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素所属的数组对象</td></tr><tr><td align="left">thisValue</td><td align="left">可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr></tbody></table><p>返回值</p><p>返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 <strong>undefined</strong>。</p><p>获取数组中年龄大于 18 的第一个元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果是 18</p></blockquote><h3 id="4-findIndex"><a href="#4-findIndex" class="headerlink" title="4.findIndex()"></a>4.findIndex()</h3><blockquote><p>接收一个函数</p><p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p><p>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 -1</li></ul><p><strong>注意:</strong> findIndex() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> findIndex() 并没有改变数组的原始值。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必需。当前元素</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素所属的数组对象</td></tr></tbody></table><p>获取数组中年龄大于等于 18 的第一个元素索引位置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果是 2</p></blockquote><h3 id="5-includes"><a href="#5-includes" class="headerlink" title="5.includes()"></a>5.includes()</h3><blockquote><p>接收一个值</p><p>includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>searchElement</em></td><td align="left">必须。需要查找的元素值。</td></tr><tr><td align="left"><em>fromIndex</em></td><td align="left">可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</td></tr></tbody></table></blockquote><h3 id="6-indexOf"><a href="#6-indexOf" class="headerlink" title="6.indexOf()"></a>6.indexOf()</h3><blockquote><p>接收一个值</p><p>indexOf() 方法可返回数组中某个指定的元素位置。</p><p>该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。开始位置的索引为 0。</p><p>如果在数组中没找到指定元素则返回 -1。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>item</em></td><td align="left">必须。查找的元素。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>a 的结果是2</p></blockquote><h3 id="7-lastIndexOf"><a href="#7-lastIndexOf" class="headerlink" title="7.lastIndexOf()"></a>7.lastIndexOf()</h3><blockquote><p>接收一个值</p><p>lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。</p><p>如果要检索的元素没有出现，则该方法返回 -1。</p><p>该方法将从尾到头地检索数组中指定元素 item。开始检索的位置在数组的 start 处或数组的结尾（没有指定 start 参数时）。如果找到一个 item，则返回 item 从尾向前检索第一个次出现在数组的位置。数组的索引开始位置是从 0 开始的。</p><p>如果在数组中没找到指定元素则返回 -1。</p></blockquote><h3 id="8-map"><a href="#8-map" class="headerlink" title="8.map()"></a>8.map()</h3><blockquote><p>接收一个函数</p><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p><strong>注意：</strong> map() 不会对空数组进行检测。</p><p><strong>注意：</strong> map() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必须。当前元素的值</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引值</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素属于的数组对象</td></tr><tr><td align="left">thisValue</td><td align="left">可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</td></tr></tbody></table><p>返回值</p><blockquote><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></blockquote><p>返回一个数组，数组中元素为原始数组的平方根</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果  2，3，4，5</p></blockquote><h3 id="9-some"><a href="#9-some" class="headerlink" title="9.some()"></a>9.some()</h3><blockquote><p>接受一个函数</p><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul><p><strong>注意：</strong> some() 不会对空数组进行检测。</p><p><strong>注意：</strong> some() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th><em>currentValue</em></th><th>必须。当前元素的值</th></tr></thead><tbody><tr><td><em>index</em></td><td>可选。当前元素的索引值</td></tr><tr><td><em>arr</em></td><td>可选。当前元素属于的数组对象</td></tr><tr><td>this.value</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr></tbody></table><p>返回值 ： 布尔值。如果数组中有元素满足条件返回 true，否则返回 false。</p><p>检测数组中是否有元素大于 18:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> ages<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>checkAdult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果 true</p></blockquote><h2 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h2><h3 id="1-fill"><a href="#1-fill" class="headerlink" title="1.fill()"></a>1.fill()</h3><blockquote><p>接收一个值</p><p>传入一个值，使用这个值来填充数组</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>start</td><td>可选。开始填充位置</td></tr><tr><td>end</td><td>可选。停止填充位置</td></tr></tbody></table></blockquote><h3 id="2-join"><a href="#2-join" class="headerlink" title="2.join()"></a>2.join()</h3><blockquote><p>接收一个字符当做分隔符。</p><p>join() 方法用于把数组中的所有元素转换一个字符串。</p><p>元素是通过指定的分隔符进行分隔的。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>separator</em></td><td align="left">可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</td></tr></tbody></table><p>返回值 </p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">String</td><td align="left">返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是webpack？为什么要使用webpack？有什么优点和特点</title>
      <link href="/2020/07/03/shi-me-shi-webpack-wei-shi-me-yao-shi-yong-webpack-you-shi-me-you-dian-he-te-dian/"/>
      <url>/2020/07/03/shi-me-shi-webpack-wei-shi-me-yao-shi-yong-webpack-you-shi-me-you-dian-he-te-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是webpack？为什么要使用它？"><a href="#什么是webpack？为什么要使用它？" class="headerlink" title="什么是webpack？为什么要使用它？"></a>什么是webpack？为什么要使用它？</h1><ol><li><p>什么是webpack</p><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用</p></li><li><p>为什么要使用webpack</p><ul><li><p>模块化，让我们可以把复杂的程序细化为小的文件</p></li><li><p>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别</p></li><li><p>scss，less等CSS预处理器</p></li><li><p>……</p></li></ul></li><li><p>webpack的工作方式</p><p>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p></li></ol><h1 id="webpack有什么优点？"><a href="#webpack有什么优点？" class="headerlink" title="webpack有什么优点？"></a>webpack有什么优点？</h1><ol><li><p>模块化</p><p>能被模块化的不仅仅是 JS。<a href="https://blog.csdn.net/hdchangchang/article/details/80183501" target="_blank" rel="noopener">webpack模块化</a></p></li><li><p>css</p><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p></li><li><p>css modules</p><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p><p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。</p></li><li><p>css预编译</p><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p><ul><li>less-loader</li><li>sass-loader</li><li>stylus-loader</li></ul><p>还有一个CSS处理平台-PostCSS，可以让你用CSS事先更多功能，比如如何使用PostCSS，    我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。<br>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p></li><li><p>轻松使用es6</p><p>因为webpack可以在浏览器不支持es6的情况下让你使用es6语法，最新的webpack版本已经不需要配置也能过变异es6语法，之前的版本都需要加入babel加载器才可以打包es6。</p></li><li><p>打包文件</p></li><li><p>减少界面请求数量</p><p>许多图片图表都是放到一张图片上的，这样做的原因是因为能过减少图片体积，同样的将js，css文件打包也可以减少体积使几面加载的更快</p></li><li><p>顶级应用spa模式即单页面应用。</p></li></ol><h1 id="webpack有什么特点？"><a href="#webpack有什么特点？" class="headerlink" title="webpack有什么特点？"></a>webpack有什么特点？</h1><h2 id="代码拆分（支持异步模块加载）"><a href="#代码拆分（支持异步模块加载）" class="headerlink" title="代码拆分（支持异步模块加载）"></a>代码拆分（支持异步模块加载）</h2><blockquote><p>Webpack 有两种组织模块依赖的方式，同步(默认)和异步（高级）。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p></blockquote><h2 id="Loader（支持任意模块加载，比如图片、less、css等等）"><a href="#Loader（支持任意模块加载，比如图片、less、css等等）" class="headerlink" title="Loader（支持任意模块加载，比如图片、less、css等等）"></a>Loader（支持任意模块加载，比如图片、less、css等等）</h2><blockquote><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p></blockquote><h2 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h2><blockquote><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p></blockquote><h2 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h2><blockquote><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p></blockquote><h2 id="快速运行"><a href="#快速运行" class="headerlink" title="快速运行"></a>快速运行</h2><blockquote><p>Webpack 使用异步 I/O （NodeJs）和多级“缓存”提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS杂项--随笔</title>
      <link href="/2020/07/03/js-za-xiang-sui-bi/"/>
      <url>/2020/07/03/js-za-xiang-sui-bi/</url>
      
        <content type="html"><![CDATA[<h1 id="JS杂项"><a href="#JS杂项" class="headerlink" title="JS杂项"></a>JS杂项</h1><h2 id="一、js常用方法"><a href="#一、js常用方法" class="headerlink" title="一、js常用方法"></a>一、js常用方法</h2><ol><li><p>获取数组中的最值</p><p><code>Math.min.apply(null,Arr)</code></p></li><li><p>数据合并  对象合并</p><p><code>this.model=Object.assign({},this.model,res.data)</code></p></li><li><p><code>object.getBoundingClientRect();</code>会得到元素的<code>top、right、bottom、left、width、height</code>属性可以得到元素各个边距离页面上边和左边的距离</p></li><li><p>字符串解析为合法js执行</p><p><code>eval()</code>函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p></li><li><p><code>arr.join(&quot;&amp;&quot;)</code> 数组转成字符串，使用&amp;为分隔符</p></li><li><p>str.trim() 去掉字符串头尾的空格</p></li><li><p>你可以使用 typeof 操作符来检测变量的数据类型。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>        <span class="token comment" spellcheck="true">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>           <span class="token comment" spellcheck="true">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>         <span class="token comment" spellcheck="true">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// 返回 object</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'John'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 返回 object</span></code></pre></li></ol><p><img src="https://ae01.alicdn.com/kf/H6f43d02c7d41420288e84ef3fec4727cA.jpg" alt=""></p><h2 id="二、生成随机字符串"><a href="#二、生成随机字符串" class="headerlink" title="二、生成随机字符串"></a>二、生成随机字符串</h2><ol><li><p>方法1</p><pre class=" language-javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// 生成随机数字, eg: 0.123456</span>             <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 转化成36进制 : "0.4fzyo82mvyr" </span>                          <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 截取最后八位 : "yo82mvyr"</span><span class="token comment" spellcheck="true">//36进制包含的字符为 0-9，a-z。</span></code></pre></li></ol><p>缺点<br>        * 只能生成有 0-9、a-z字符组成的字符串<br>        * 由于 Math.random()生成的18位小数，可能无法填充36位，最后几个字符串，只能             在指    定的几个字符中选择。导致随机性降低。<br>        * 某些情况下会返回空值。例如，当随机数为 0, 0.5, 0.25, 0.125…时，返回        为空值。空值几率千万分之一<br>2. 方法2</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">function</span> <span class="token function">randomString</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> length<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> result <span class="token operator">+</span><span class="token operator">=</span> chars<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> rString <span class="token operator">=</span> <span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css杂项--随笔</title>
      <link href="/2020/07/03/css-za-xiang-sui-bi/"/>
      <url>/2020/07/03/css-za-xiang-sui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、常用的css属性"><a href="#一、常用的css属性" class="headerlink" title="一、常用的css属性"></a>一、常用的css属性</h2><pre class=" language-css"><code class="language-css"><span class="token selector">z-index: 5;     设置权重，数字大的显示在上面，默认为1overflow: hidden;  可以用来清除浮动效果（给有浮动效果的父元素添加），溢出元素的部分隐藏opacity: 50%;   设置元素的透明度p<span class="token pseudo-class">:first-of-type</span><span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\e786'</span><span class="token punctuation">;</span>    <span class="token property">content</span> <span class="token punctuation">:</span> 用来给伪元素添加内容<span class="token punctuation">}</span><span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  设置内容溢出的时候出现滚动条<span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>     设置鼠标样式object-fit ：cover  设置图片的填充方式</code></pre><h2 id="二、让超出两行的部分显示省略号"><a href="#二、让超出两行的部分显示省略号" class="headerlink" title="二、让超出两行的部分显示省略号"></a>二、让超出两行的部分显示省略号</h2><p><img src="https://ae01.alicdn.com/kf/H27c334643b3349bb82ba1d265c67aaba2.jpg" alt=""></p><pre class=" language-css"><code class="language-css"> <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><h2 id="三、设置滚动条样式"><a href="#三、设置滚动条样式" class="headerlink" title="三、设置滚动条样式"></a>三、设置滚动条样式</h2><h3 id="一：webkit-下CSS设置滚动条"><a href="#一：webkit-下CSS设置滚动条" class="headerlink" title="一：webkit 下CSS设置滚动条"></a>一：webkit 下CSS设置滚动条</h3><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar 滚动条整体，可以设置宽度等①<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-button 滚动条两端的按钮②<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-track 外层轨道③<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-track-piece 内层滚动槽④<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-thumb 滚动的滑块⑤<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-scrollbar-corner 边角⑥<span class="token punctuation">:</span><span class="token punctuation">:</span>-webkit-resizer 下角拖动块的样式⑦</code></pre><p><img src="D:%5Chexo%5Csource%5C%E6%BB%9A%E5%8A%A8%E6%9D%A1.png" alt="滚动条"></p><p>还有更详细的一些属性：</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>horizontal 水平方向的滚动条<span class="token punctuation">:</span>vertical 垂直 方向的滚动条<span class="token punctuation">:</span>decrement 应用于按钮和内层轨道<span class="token punctuation">(</span>track piece<span class="token punctuation">)</span>。它用来指示按钮或者内层轨道是否会减小视窗的位置<span class="token punctuation">(</span>比如，垂直滚动条的上面，水平滚动条的左边。<span class="token punctuation">)</span><span class="token punctuation">:</span>increment decrement 类似，用来指示按钮或内层轨道是否会增大视窗的位置<span class="token punctuation">(</span>比如，垂直滚动条的下面和水平滚动条的右边。<span class="token punctuation">)</span><span class="token punctuation">:</span>start 伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。<span class="token punctuation">:</span>end 类似于 start 伪类，标识对象是否放到滑块的后面。<span class="token punctuation">:</span>double-button 该伪类以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。<span class="token punctuation">:</span>single-button 类似于 double-button 伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个 single-button 。<span class="token punctuation">:</span>no-button 用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。<span class="token punctuation">:</span>corner-present 用于所有滚动条轨道，指示滚动条圆角是否显示。<span class="token punctuation">:</span>window-inactive 用于所有的滚动条轨道，指示应用滚动条的某个页面容器<span class="token punctuation">(</span>元素<span class="token punctuation">)</span>是否当前被激活。<span class="token punctuation">(</span>在webkit最近的版本中，该伪类也可以用于<span class="token punctuation">:</span><span class="token punctuation">:</span>selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类<span class="token punctuation">)</span></code></pre><h3 id="ie设置滚动条样式"><a href="#ie设置滚动条样式" class="headerlink" title="ie设置滚动条样式"></a>ie设置滚动条样式</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.scrollbar</span> </span><span class="token punctuation">{</span>    <span class="token property">scrollbar-arrow-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*三角箭头的颜色*/</span>    <span class="token property">scrollbar-face-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*立体滚动条的颜色（包括箭头部分的背景色）*/</span>    <span class="token property">scrollbar-3dlight-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*立体滚动条亮边的颜色*/</span>    <span class="token property">scrollbar-highlight-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*滚动条的高亮颜色（左阴影？）*/</span>    <span class="token property">scrollbar-shadow-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*立体滚动条阴影的颜色*/</span>    <span class="token property">scrollbar-darkshadow-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*立体滚动条外阴影的颜色*/</span>    <span class="token property">scrollbar-track-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*立体滚动条背景颜色*/</span>    <span class="token property">scrollbar-base-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*滚动条的基色*/</span><span class="token punctuation">}</span></code></pre><h3 id="取消-隐藏滚动条"><a href="#取消-隐藏滚动条" class="headerlink" title="取消/隐藏滚动条"></a>取消/隐藏滚动条</h3><pre class=" language-css"><code class="language-css"><span class="token property">scrollbar-width</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Firefox */</span><span class="token property">-ms-overflow-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE 10+ */</span><span class="token selector"><span class="token pseudo-element">::-webkit-scrollbar</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Chrome Safari */</span><span class="token punctuation">}</span></code></pre><h2 id="四、第一个子元素设置margin-top-父元素高度塌陷"><a href="#四、第一个子元素设置margin-top-父元素高度塌陷" class="headerlink" title="四、第一个子元素设置margin-top 父元素高度塌陷"></a>四、第一个子元素设置margin-top 父元素高度塌陷</h2><h3 id="1-给父元素添加边框"><a href="#1-给父元素添加边框" class="headerlink" title="1.给父元素添加边框"></a>1.给父元素添加边框</h3><ul><li>为了不影响原先的图像效果，可以将边框颜色设置为白色（与浏览器背景颜色一致）</li></ul><h3 id="2-溢出隐藏"><a href="#2-溢出隐藏" class="headerlink" title="2.溢出隐藏"></a>2.溢出隐藏</h3><ul><li>在父元素设置overflow：hidden；<h3 id="3-设置浮动"><a href="#3-设置浮动" class="headerlink" title="3.设置浮动"></a>3.设置浮动</h3></li><li>给父元素添加浮动，但是这种方法不推荐使用。因为会带来未知的错误<h3 id="4-给父元素添加position-fixed"><a href="#4-给父元素添加position-fixed" class="headerlink" title="4.给父元素添加position:fixed;"></a>4.给父元素添加position:fixed;</h3></li><li>将父元素显示在固定位置，就不会受margin-top塌陷的问题影响<h3 id="5-使用伪元素"><a href="#5-使用伪元素" class="headerlink" title="5.使用伪元素"></a>5.使用伪元素</h3></li><li>伪元素之所以被称为伪元素，就是因为他们不是真正的页面元素，html没有与之对应的元素，但是其用法和表现行为和真正的元素一样，所以被成为伪元素。</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.father</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git忽略文件</title>
      <link href="/2020/07/09/git-hu-lue-wen-jian/"/>
      <url>/2020/07/09/git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="文件名-gitignore"><a href="#文件名-gitignore" class="headerlink" title="文件名 .gitignore"></a>文件名 .gitignore</h2><pre><code>.DS_Storenode_modules/dist# local env files.env.local.env.*.local# Log filesnpm-debug.log*yarn-debug.log*yarn-error.log*pnpm-debug.log*# Editor directories and files.idea.vscode*.suo*.ntvs**.njsproj*.sln*.sw?</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常用的数组方法</title>
      <link href="/2020/07/05/js-chang-yong-de-shu-zu-fang-fa/"/>
      <url>/2020/07/05/js-chang-yong-de-shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="1-every"><a href="#1-every" class="headerlink" title="1.every()"></a>1.every()</h3><blockquote><p>接收一个函数</p><p>传入一个函数，使用函数检测数组所有元素是否都符合指定条件（通过函数提供）</p><ul><li><p>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</p></li><li><p>如果所有元素都满足条件，则返回 true。 </p></li></ul><p>注意：every() 不会对空数组进行检测。</p><p>注意：every() 不会改变原始数组。</p><p>注意：一定要return 一个表达式或者布尔值</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>index</td><td>可选。当前元素索引</td></tr><tr><td>arr</td><td>可选。当前元素属于的数组对象</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr><tr><td>返回值</td><td></td></tr></tbody></table><blockquote><p>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</p></blockquote><p>检测数组 <em>ages</em> 的所有元素是否都大于等于 18</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>返回值是 false</p></blockquote><h3 id="2-filter"><a href="#2-filter" class="headerlink" title="2.filter()"></a>2.filter()</h3><blockquote><p>接收一个函数</p><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><strong>注意：</strong> filter() 不会对空数组进行检测。</p><p><strong>注意：</strong> filter() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>index</td><td>可选。当前元素索引</td></tr><tr><td>arr</td><td>可选。当前元素属于的数组对象</td></tr><tr><td>thisValue</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr><tr><td>返回值</td><td></td></tr></tbody></table><blockquote><p>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</p></blockquote><p>返回数组 <em>ages</em> 中所有元素都大于 18 的元素</p><pre><code>var ages = [32, 33, 16, 40];function checkAdult(age) {     return age &gt;= 18;}</code></pre><p>输出结果是 32， 33， 40</p></blockquote><h3 id="3-find"><a href="#3-find" class="headerlink" title="3.find()"></a>3.find()</h3><blockquote><p>接收一个函数</p><p>find() 方法返回满足测试（函数内判断）的数组的第一个元素的值。</p><p>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined</li></ul><p><strong>注意:</strong> find() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> find() 并没有改变数组的原始值。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必需。当前元素</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引值</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素所属的数组对象</td></tr><tr><td align="left">thisValue</td><td align="left">可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr></tbody></table><p>返回值</p><p>返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 <strong>undefined</strong>。</p><p>获取数组中年龄大于 18 的第一个元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果是 18</p></blockquote><h3 id="4-findIndex"><a href="#4-findIndex" class="headerlink" title="4.findIndex()"></a>4.findIndex()</h3><blockquote><p>接收一个函数</p><p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p><p>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 -1</li></ul><p><strong>注意:</strong> findIndex() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> findIndex() 并没有改变数组的原始值。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必需。当前元素</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素所属的数组对象</td></tr></tbody></table><p>获取数组中年龄大于等于 18 的第一个元素索引位置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果是 2</p></blockquote><h3 id="5-includes"><a href="#5-includes" class="headerlink" title="5.includes()"></a>5.includes()</h3><blockquote><p>接收一个值</p><p>includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>searchElement</em></td><td align="left">必须。需要查找的元素值。</td></tr><tr><td align="left"><em>fromIndex</em></td><td align="left">可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</td></tr></tbody></table></blockquote><h3 id="6-indexOf"><a href="#6-indexOf" class="headerlink" title="6.indexOf()"></a>6.indexOf()</h3><blockquote><p>接收一个值</p><p>indexOf() 方法可返回数组中某个指定的元素位置。</p><p>该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。开始位置的索引为 0。</p><p>如果在数组中没找到指定元素则返回 -1。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>item</em></td><td align="left">必须。查找的元素。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>a 的结果是2</p></blockquote><h3 id="7-lastIndexOf"><a href="#7-lastIndexOf" class="headerlink" title="7.lastIndexOf()"></a>7.lastIndexOf()</h3><blockquote><p>接收一个值</p><p>lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。</p><p>如果要检索的元素没有出现，则该方法返回 -1。</p><p>该方法将从尾到头地检索数组中指定元素 item。开始检索的位置在数组的 start 处或数组的结尾（没有指定 start 参数时）。如果找到一个 item，则返回 item 从尾向前检索第一个次出现在数组的位置。数组的索引开始位置是从 0 开始的。</p><p>如果在数组中没找到指定元素则返回 -1。</p></blockquote><h3 id="8-map"><a href="#8-map" class="headerlink" title="8.map()"></a>8.map()</h3><blockquote><p>接收一个函数</p><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p><strong>注意：</strong> map() 不会对空数组进行检测。</p><p><strong>注意：</strong> map() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>currentValue</em></td><td align="left">必须。当前元素的值</td></tr><tr><td align="left"><em>index</em></td><td align="left">可选。当前元素的索引值</td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。当前元素属于的数组对象</td></tr><tr><td align="left">thisValue</td><td align="left">可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</td></tr></tbody></table><p>返回值</p><blockquote><p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></blockquote><p>返回一个数组，数组中元素为原始数组的平方根</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果  2，3，4，5</p></blockquote><h3 id="9-some"><a href="#9-some" class="headerlink" title="9.some()"></a>9.some()</h3><blockquote><p>接受一个函数</p><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul><p><strong>注意：</strong> some() 不会对空数组进行检测。</p><p><strong>注意：</strong> some() 不会改变原始数组。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>thisValue<span class="token punctuation">)</span></code></pre><table><thead><tr><th><em>currentValue</em></th><th>必须。当前元素的值</th></tr></thead><tbody><tr><td><em>index</em></td><td>可选。当前元素的索引值</td></tr><tr><td><em>arr</em></td><td>可选。当前元素属于的数组对象</td></tr><tr><td>this.value</td><td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。如果省略了 thisValue ，”this” 的值为 “undefined”</td></tr></tbody></table><p>返回值 ： 布尔值。如果数组中有元素满足条件返回 true，否则返回 false。</p><p>检测数组中是否有元素大于 18:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAdult</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> ages<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>checkAdult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果 true</p></blockquote><h2 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h2><h3 id="1-fill"><a href="#1-fill" class="headerlink" title="1.fill()"></a>1.fill()</h3><blockquote><p>接收一个值</p><p>传入一个值，使用这个值来填充数组</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>必须。当前元素</td></tr><tr><td>start</td><td>可选。开始填充位置</td></tr><tr><td>end</td><td>可选。停止填充位置</td></tr></tbody></table></blockquote><h3 id="2-join"><a href="#2-join" class="headerlink" title="2.join()"></a>2.join()</h3><blockquote><p>接收一个字符当做分隔符。</p><p>join() 方法用于把数组中的所有元素转换一个字符串。</p><p>元素是通过指定的分隔符进行分隔的。</p><p>语法</p><pre class=" language-javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>separator</em></td><td align="left">可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</td></tr></tbody></table><p>返回值 </p><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">String</td><td align="left">返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是webpack？为什么要使用webpack？有什么优点和特点</title>
      <link href="/2020/07/03/shi-me-shi-webpack-wei-shi-me-yao-shi-yong-webpack-you-shi-me-you-dian-he-te-dian/"/>
      <url>/2020/07/03/shi-me-shi-webpack-wei-shi-me-yao-shi-yong-webpack-you-shi-me-you-dian-he-te-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是webpack？为什么要使用它？"><a href="#什么是webpack？为什么要使用它？" class="headerlink" title="什么是webpack？为什么要使用它？"></a>什么是webpack？为什么要使用它？</h1><ol><li><p>什么是webpack</p><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用</p></li><li><p>为什么要使用webpack</p><ul><li><p>模块化，让我们可以把复杂的程序细化为小的文件</p></li><li><p>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别</p></li><li><p>scss，less等CSS预处理器</p></li><li><p>……</p></li></ul></li><li><p>webpack的工作方式</p><p>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p></li></ol><h1 id="webpack有什么优点？"><a href="#webpack有什么优点？" class="headerlink" title="webpack有什么优点？"></a>webpack有什么优点？</h1><ol><li><p>模块化</p><p>能被模块化的不仅仅是 JS。<a href="https://blog.csdn.net/hdchangchang/article/details/80183501" target="_blank" rel="noopener">webpack模块化</a></p></li><li><p>css</p><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p></li><li><p>css modules</p><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p><p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。</p></li><li><p>css预编译</p><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p><ul><li>less-loader</li><li>sass-loader</li><li>stylus-loader</li></ul><p>还有一个CSS处理平台-PostCSS，可以让你用CSS事先更多功能，比如如何使用PostCSS，    我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。<br>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）</p></li><li><p>轻松使用es6</p><p>因为webpack可以在浏览器不支持es6的情况下让你使用es6语法，最新的webpack版本已经不需要配置也能过变异es6语法，之前的版本都需要加入babel加载器才可以打包es6。</p></li><li><p>打包文件</p></li><li><p>减少界面请求数量</p><p>许多图片图表都是放到一张图片上的，这样做的原因是因为能过减少图片体积，同样的将js，css文件打包也可以减少体积使几面加载的更快</p></li><li><p>顶级应用spa模式即单页面应用。</p></li></ol><h1 id="webpack有什么特点？"><a href="#webpack有什么特点？" class="headerlink" title="webpack有什么特点？"></a>webpack有什么特点？</h1><h2 id="代码拆分（支持异步模块加载）"><a href="#代码拆分（支持异步模块加载）" class="headerlink" title="代码拆分（支持异步模块加载）"></a>代码拆分（支持异步模块加载）</h2><blockquote><p>Webpack 有两种组织模块依赖的方式，同步(默认)和异步（高级）。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p></blockquote><h2 id="Loader（支持任意模块加载，比如图片、less、css等等）"><a href="#Loader（支持任意模块加载，比如图片、less、css等等）" class="headerlink" title="Loader（支持任意模块加载，比如图片、less、css等等）"></a>Loader（支持任意模块加载，比如图片、less、css等等）</h2><blockquote><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p></blockquote><h2 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h2><blockquote><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p></blockquote><h2 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h2><blockquote><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p></blockquote><h2 id="快速运行"><a href="#快速运行" class="headerlink" title="快速运行"></a>快速运行</h2><blockquote><p>Webpack 使用异步 I/O （NodeJs）和多级“缓存”提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS杂项--随笔</title>
      <link href="/2020/07/03/js-za-xiang-sui-bi/"/>
      <url>/2020/07/03/js-za-xiang-sui-bi/</url>
      
        <content type="html"><![CDATA[<h1 id="JS杂项"><a href="#JS杂项" class="headerlink" title="JS杂项"></a>JS杂项</h1><h2 id="js常用方法"><a href="#js常用方法" class="headerlink" title="js常用方法"></a>js常用方法</h2><ol><li><p>获取数组中的最值</p><p><code>Math.min.apply(null,Arr)</code></p></li><li><p>数据合并  对象合并</p><p><code>this.model=Object.assign({},this.model,res.data)</code></p></li><li><p><code>object.getBoundingClientRect();</code>会得到元素的<code>top、right、bottom、left、width、height</code>属性可以得到元素各个边距离页面上边和左边的距离</p></li><li><p>字符串解析为合法js执行</p><p><code>eval()</code>函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p></li><li><p><code>arr.join(&quot;&amp;&quot;)</code> 数组转成字符串，使用&amp;为分隔符</p></li><li><p>你可以使用 typeof 操作符来检测变量的数据类型。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>        <span class="token comment" spellcheck="true">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>           <span class="token comment" spellcheck="true">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>         <span class="token comment" spellcheck="true">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// 返回 object</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'John'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 返回 object</span></code></pre></li></ol><p><img src="https://ae01.alicdn.com/kf/H6f43d02c7d41420288e84ef3fec4727cA.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css杂项--随笔</title>
      <link href="/2020/07/03/css-za-xiang-sui-bi/"/>
      <url>/2020/07/03/css-za-xiang-sui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的css属性"><a href="#常用的css属性" class="headerlink" title="常用的css属性"></a>常用的css属性</h2><pre class=" language-css"><code class="language-css"><span class="token selector">z-index: 5;     设置权重，数字大的显示在上面，默认为1overflow: hidden;  可以用来清除浮动效果（给有浮动效果的父元素添加），溢出元素的部分隐藏opacity: 50%;   设置元素的透明度p<span class="token pseudo-class">:first-of-type</span><span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\e786'</span><span class="token punctuation">;</span>    <span class="token property">content</span> <span class="token punctuation">:</span> 用来给伪元素添加内容<span class="token punctuation">}</span><span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  设置内容溢出的时候出现滚动条<span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>     设置鼠标样式object-fit ：cover  设置图片的填充方式</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="让超出两行的部分显示省略号"><a href="#让超出两行的部分显示省略号" class="headerlink" title="让超出两行的部分显示省略号"></a>让超出两行的部分显示省略号</h2><p><img src="https://ae01.alicdn.com/kf/H27c334643b3349bb82ba1d265c67aaba2.jpg" alt=""></p><pre class=" language-css"><code class="language-css"> <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
